{"version":3,"sources":["cmps/PadPreview.jsx","cmps/PadList.jsx","services/padService.js","services/utilService.js","pages/Home.jsx","cmps/AppHeader.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["PadPreview","pad","activeTrackIds","manageQueue","isPlaying","toggleIsPlaying","recSettings","handleRec","onRecPlayback","loopFile","useRef","isPadActive","some","trackId","_id","useEffect","current","Audio","fileUrl","a","currentTime","play","setTimeout","onLoopEnd","recIsOn","playbackMode","duration","onTogglePlay","pause","className","onClick","style","backgroundColor","bgc","title","PadList","pads","map","padService","query","baseUrl","process","utilService","delay","ms","Promise","resolve","getRandomInt","min","max","Math","ceil","floor","random","makeId","length","txt","possible","i","charAt","saveToStorage","key","val","str","JSON","stringify","localStorage","setItem","loadFromStorage","getItem","parse","removeFromStorage","removeItem","Home","STORAGE_KEY","seekAnimDuration","svgBaseUrl","recordingFromStorage","useState","setActiveTrackIds","iteration","recording","setRecSettings","window","location","reload","console","log","includes","filter","padId","src","alt","animationDuration","animationDelay","AppHeader","to","href","stroke","fill","strokeWidth","viewBox","strokeLinecap","strokeLinejoin","height","width","xmlns","d","App","path","component","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.96e6195c.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\"\r\n\r\nexport const PadPreview = ({ pad, activeTrackIds, manageQueue,\r\n    isPlaying, toggleIsPlaying, recSettings, handleRec, onRecPlayback }) => {\r\n\r\n    let loopFile = useRef()\r\n    const isPadActive = activeTrackIds &&\r\n        activeTrackIds.some(trackId => trackId === pad._id)\r\n\r\n    useEffect(() => {\r\n        loopFile.current = new Audio(pad.fileUrl)\r\n        // loopFile.current.onended = onLoopEnd // Determine what happens when track has finished playing\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // Every time the component re-renders,\r\n        // it checks if there is a loop currently playing,\r\n        // and if the pad associated with the component is on (activeId)\r\n        // (\"no current loop\" also means the few millisecond break when track ends)\r\n        (async () => {\r\n            if (!isPlaying && isPadActive) {\r\n                loopFile.current.currentTime = 0\r\n                await loopFile.current.play()\r\n                setTimeout(async () => {\r\n                    toggleIsPlaying(true)\r\n                    onLoopEnd()\r\n                    recSettings.recIsOn && handleRec()\r\n                }, 5)\r\n            }\r\n        })()\r\n    })\r\n\r\n    const onLoopEnd = () => {\r\n        setTimeout(() => {\r\n            if (recSettings.playbackMode) onRecPlayback()\r\n            setTimeout(() => toggleIsPlaying(false), 5)\r\n            // ^ Sets the state of the parent \"Home\" component directly. \r\n            // In most cases could be avoided by simply creating a function in the parent component that does just that, and activating it from child component.\r\n            // Unfortunately, had some issues with that method and this appeared to be the only option to work in this use-case.\r\n        }, loopFile.current.duration * 1000)\r\n    }\r\n\r\n    const onTogglePlay = async () => {\r\n        // In charge of dynamically adding the pad to activeIds / or stopping the track immediately and removing it from activeIds.\r\n        // Happens when manually clicking on pad.\r\n        if (isPadActive) {\r\n            loopFile.current.pause()\r\n            loopFile.current.currentTime = 0\r\n            toggleIsPlaying(false)\r\n        }\r\n        manageQueue(pad)\r\n    }\r\n\r\n    return <article className={`pad-preview ${isPadActive ? 'active' : ''}`}>\r\n        <button onClick={onTogglePlay} style={{ backgroundColor: pad.bgc }}>\r\n            <span>{pad.title}</span>\r\n        </button>\r\n    </article>\r\n}","import { PadPreview } from './PadPreview.jsx'\r\n\r\nexport const PadList = ({ pads, activeTrackIds, manageQueue,\r\n    isPlaying, toggleIsPlaying, recSettings, handleRec, onRecPlayback }) => {\r\n\r\n    return <section className=\"pad-list main-layout\">\r\n        {pads.map(pad => {\r\n            return <PadPreview key={pad._id} pad={pad} activeTrackIds={activeTrackIds} manageQueue={manageQueue}\r\n                isPlaying={isPlaying} toggleIsPlaying={toggleIsPlaying} recSettings={recSettings}\r\n                handleRec={handleRec} onRecPlayback={onRecPlayback} />\r\n        })}\r\n    </section>\r\n}","export const padService = {\r\n    query\r\n}\r\n\r\nfunction query() {\r\n    \r\n    const { PUBLIC_URL } = process.env\r\n    const baseUrl = `${PUBLIC_URL}/assets/sounds/`\r\n\r\n    return [\r\n        {\r\n            _id: 'p101',\r\n            title: 'Future Funk Beats 25',\r\n            fileUrl: `${baseUrl}120_future_funk_beats_25.mp3`,\r\n            bgc: '#2da254',\r\n        },\r\n        {\r\n            _id: 'p102',\r\n            title: 'Stutter Breakbeats',\r\n            fileUrl: `${baseUrl}120_stutter_breakbeats_16.mp3`,\r\n            bgc: '#ca9d2a',\r\n        },\r\n        {\r\n            _id: 'p103',\r\n            title: 'Bass Warwick',\r\n            fileUrl: `${baseUrl}Bass Warwick heavy funk groove on E 120 BPM.mp3`,\r\n            bgc: '#c32e2e',\r\n        },\r\n        {\r\n            _id: 'p104',\r\n            title: 'Electric Guitar',\r\n            fileUrl: `${baseUrl}electric guitar coutry slide 120bpm - B.mp3`,\r\n            bgc: '#2d69a2',\r\n        },\r\n        {\r\n            _id: 'p105',\r\n            title: 'Stompy Slosh',\r\n            fileUrl: `${baseUrl}FUD_120_StompySlosh.mp3`,\r\n            bgc: '#832da2',\r\n        },\r\n        {\r\n            _id: 'p106',\r\n            title: 'Tanggu',\r\n            fileUrl: `${baseUrl}GrooveB_120bpm_Tanggu.mp3`,\r\n            bgc: '#a9bb32',\r\n        },\r\n        {\r\n            _id: 'p107',\r\n            title: 'Maze Politics',\r\n            fileUrl: `${baseUrl}MazePolitics_120_Perc.mp3`,\r\n            bgc: '#2d9fa2',\r\n        },\r\n        {\r\n            _id: 'p108',\r\n            title: 'PAS GROOVE',\r\n            fileUrl: `${baseUrl}PAS3GROOVE1.03B.mp3`,\r\n            bgc: '#509de6',\r\n        },\r\n        {\r\n            _id: 'p109',\r\n            title: 'Silent Star',\r\n            fileUrl: `${baseUrl}SilentStar_120_Em_OrganSynth.mp3`,\r\n            bgc: '#a22d7b',\r\n        },\r\n    ]\r\n}","export const utilService = {\r\n    delay,\r\n    getRandomInt,\r\n    makeId,\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    removeFromStorage\r\n}\r\n\r\nfunction delay(ms = 1500) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms)\r\n    })\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n    //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    const str = JSON.stringify(val)\r\n    localStorage.setItem(key, str)\r\n}\r\nfunction loadFromStorage(key) {\r\n    const str = localStorage.getItem(key)\r\n    return JSON.parse(str)\r\n}\r\nfunction removeFromStorage(key) {\r\n    localStorage.removeItem(key)\r\n}","import { Fragment, useState } from 'react'\r\nimport { PadList } from '../cmps/PadList'\r\nimport { padService } from '../services/padService'\r\nimport { utilService } from '../services/utilService'\r\n\r\n//// Welcome to my freshly-made \"BEAT IT\" looper ReactJS app.\r\n//// As I've mentioned in the letter I sent together with the app,\r\n//// the finished product, while operational,\r\n//// resulted in being slightly more complex than I initially intended.\r\n//// Hence, I left comments wherever necessary.\r\n//// Feel free to have a look around :)\r\n\r\nexport const Home = () => {\r\n\r\n    let pads = padService.query()\r\n    const STORAGE_KEY = 'REC'\r\n    const seekAnimDuration = 8.045688\r\n    const svgBaseUrl = `${process.env.PUBLIC_URL}/assets/imgs/`\r\n    const recordingFromStorage = utilService.loadFromStorage(STORAGE_KEY)\r\n    const [activeTrackIds, setActiveTrackIds] = useState([])\r\n    const [isPlaying, toggleIsPlaying] = useState(false)\r\n    const [recSettings, setRecSettings] = useState({\r\n        recIsOn: false,\r\n        playbackMode: false,\r\n        iteration: 0,\r\n        recording: recordingFromStorage || []\r\n    })\r\n\r\n    const manageQueue = pad => {\r\n        // In charge of dynamically inserting/removing IDs from \"activeTrackIds\"\r\n        if (activeTrackIds && activeTrackIds.includes(pad._id)) {\r\n            setActiveTrackIds(activeTrackIds.filter(padId => {\r\n                return padId !== pad._id\r\n            }))\r\n        }\r\n        else setActiveTrackIds([...activeTrackIds, pad._id])\r\n    }\r\n\r\n    // From this point on, all 4 remaining function deal only with recording logic\r\n    const onToggleRec = () => {\r\n        setRecSettings({\r\n            ...recSettings,\r\n            recIsOn: !recSettings.recIsOn,\r\n            iteration: 0\r\n        })\r\n        utilService.saveToStorage(STORAGE_KEY, recSettings.recording)\r\n    }\r\n\r\n    const handleRec = () => {\r\n        // In charge of advancing the iteration count,\r\n        // as well as adding a new activeIds array into the recorded data\r\n        setRecSettings({\r\n            ...recSettings,\r\n            iteration: recSettings.iteration + 1,\r\n            recording: [...recSettings.recording, activeTrackIds]\r\n            // ^ Adds an array with the active tracks into the recording array at every iteration,\r\n            // resulting in a 2D array\r\n        })\r\n    }\r\n\r\n    const onRecPlayback = () => {\r\n        // In charge of dynamic playback/stop (specifically for the recording)\r\n        if (isPlaying) return window.location.reload() // temp solution\r\n        setRecSettings({\r\n            ...recSettings,\r\n            playbackMode: recSettings.iteration !== recSettings.recording.length,\r\n            iteration: (recSettings.iteration >= recSettings.recording.length) ?\r\n                0 : recSettings.iteration + 1\r\n            // ^ This condition allows for recording to be replayed more than once by resetting the iteration count\r\n        })\r\n        setActiveTrackIds(recSettings.recording[recSettings.iteration])\r\n        setTimeout(() => toggleIsPlaying(true), 5)\r\n    }\r\n\r\n    const onClearRec = () => {\r\n        // Clearing from localStorage and re-initializing \"recSettings\"\r\n        utilService.removeFromStorage(STORAGE_KEY)\r\n        setRecSettings({\r\n            ...recSettings,\r\n            recIsOn: false,\r\n            playbackMode: false,\r\n            iteration: 0,\r\n            recording: []\r\n        })\r\n    }\r\n\r\n    console.log(recSettings.iteration)\r\n    return <section className=\"home-page\">\r\n        <PadList pads={pads} activeTrackIds={activeTrackIds} manageQueue={manageQueue} isPlaying={isPlaying}\r\n            toggleIsPlaying={toggleIsPlaying} recSettings={recSettings} handleRec={handleRec} onRecPlayback={onRecPlayback} />\r\n        {recSettings.recIsOn && <img src={`${svgBaseUrl}rec-indication.svg`} alt=\"rec-indication\" />}\r\n        <div className=\"global-play-container flex\">\r\n            <button onClick={onRecPlayback}>\r\n                {isPlaying ? <img src={`${svgBaseUrl}btn-stop.svg`} alt=\"stop\" />\r\n                    : <img src={`${svgBaseUrl}btn-play.svg`} alt=\"play\" />}\r\n            </button>\r\n            <button className={recSettings.playbackMode ? 'disabled' : ''}\r\n                onClick={!recSettings.playbackMode && onToggleRec}>\r\n                <img src={`${svgBaseUrl}btn-rec.svg`} alt=\"rec\" />\r\n            </button>\r\n            <div className={`play-time-status flex a-center ${isPlaying ? 'active' : ''}`}>\r\n                <span style={{\r\n                    animationDuration: `${seekAnimDuration * recSettings.recording.length}s`,\r\n                    animationDelay: `${-seekAnimDuration * (recSettings.iteration - 1)}s`\r\n                }}></span>\r\n                {recSettings.recording.length && !recSettings.recIsOn ?\r\n                    <Fragment>\r\n                        <label className={`muted ${recSettings.playbackMode ? 'playback-mode' : ''}`}>\r\n                            {recSettings.playbackMode ? 'PLAYING RECORDING' : '* Recording available'}\r\n                        </label>\r\n                        <button onClick={onClearRec}>\r\n                            <img src={`${svgBaseUrl}btn-clear.svg`} alt=\"clear\" />\r\n                        </button>\r\n                    </Fragment> : null}\r\n            </div>\r\n        </div>\r\n    </section>\r\n}","import { NavLink } from 'react-router-dom'\r\n\r\nexport const AppHeader = () => {\r\n\r\n    return <header className=\"app-header\">\r\n        <section className=\"main-layout flex j-between a-center\">\r\n            <div className=\"logo flex a-center\">\r\n                <img src={`${process.env.PUBLIC_URL}/favicon.png`} alt=\"\" />\r\n                <NavLink to=\"/\">BEAT IT</NavLink>\r\n            </div>\r\n            <nav>\r\n                <a href=\"https://github.com/tomleb3/beatit\">\r\n                    <svg stroke=\"currentColor\" fill=\"none\" strokeWidth=\"2\" viewBox=\"0 0 24 24\" strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\" className=\"social-link\" height=\"2em\" width=\"2em\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35\r\n                         6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65\r\n                          16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44\r\n                           5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22\"></path>\r\n                    </svg>\r\n                </a>\r\n            </nav>\r\n        </section>\r\n    </header>\r\n}","import { Switch, Route } from 'react-router-dom'\nimport { Home } from './pages/Home.jsx'\nimport { AppHeader } from './cmps/AppHeader.jsx'\n\nexport function App() {\n  return (\n    <main className=\"App\">\n      <AppHeader />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n      </Switch>\n    </main>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport { HashRouter as Router } from 'react-router-dom'\nimport './styles/global.scss'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.unregister()\nreportWebVitals()\n"],"sourceRoot":""}