{"version":3,"sources":["cmps/PadPreview.jsx","cmps/PadList.jsx","services/padService.js","services/utilService.js","assets/imgs/btn-play.svg","assets/imgs/btn-stop.svg","assets/imgs/btn-rec.svg","assets/imgs/btn-clear.svg","assets/imgs/rec-indication.svg","pages/Home.jsx","cmps/AppHeader.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["PadPreview","pad","activeTrackIds","manageQueue","isPlaying","toggleIsPlaying","recSettings","handleRec","loopFile","useRef","isPadActive","find","trackId","_id","useEffect","current","Audio","fileUrl","onended","onLoopEnd","a","currentTime","play","setTimeout","recIsOn","onTogglePlay","pause","className","onClick","style","backgroundColor","bgc","PadList","pads","map","padService","query","PUBLIC_URL","process","title","utilService","delay","ms","Promise","resolve","getRandomInt","min","max","Math","ceil","floor","random","makeId","length","txt","possible","i","charAt","saveToStorage","key","val","str","JSON","stringify","localStorage","setItem","loadFromStorage","getItem","parse","removeFromStorage","removeItem","Home","STORAGE_KEY","recordingFromStorage","useState","setActiveTrackIds","iteration","recording","setRecSettings","console","log","includes","filter","padId","src","recIndicationIco","alt","window","location","reload","stopBtnIco","playBtnIco","recBtnIco","clearBtnIco","AppHeader","to","href","stroke","fill","strokeWidth","viewBox","strokeLinecap","strokeLinejoin","height","width","xmlns","d","App","path","component","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.acf4ec15.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\"\r\n\r\nexport const PadPreview = ({ pad, activeTrackIds, manageQueue,\r\n    isPlaying, toggleIsPlaying, recSettings, handleRec }) => {\r\n\r\n    let loopFile = useRef()\r\n    const isPadActive = activeTrackIds &&\r\n        activeTrackIds.find(trackId => trackId === pad._id)\r\n\r\n    useEffect(() => {\r\n        loopFile.current = new Audio(pad.fileUrl)\r\n        loopFile.current.onended = onLoopEnd // Determine what happens when track has finished playing\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // Every time the component re-renders,\r\n        // it checks if there is a loop currently playing,\r\n        // and if the pad associated with the component is on (activeId)\r\n        // (no current loop also means the few millisecond break when track ends)\r\n        (async () => {\r\n            if (!isPlaying && isPadActive) {\r\n                loopFile.current.currentTime = 0\r\n                await loopFile.current.play()\r\n                setTimeout(() => {\r\n                    toggleIsPlaying(true)\r\n                    recSettings.recIsOn && handleRec()\r\n                }, 5) // ( setTimeout needed for progress-bar & handleRec ) - possibly related to small delay resulted in setting the relevant states\r\n            }\r\n        })()\r\n    })\r\n\r\n    const onLoopEnd = () => toggleIsPlaying(false)\r\n    // ^ Sets the state of the parent \"Home\" component directly. \r\n    // In most cases could by avoided by simply creating a function in the parent component that does just that and activating it from child component.\r\n    // Unfortunately, had some issues with that method and this appeared to be the only thing to work in this use-case.\r\n\r\n    const onTogglePlay = async () => {\r\n        // In charge of dynamically adding the pad to activeIds / or stopping the track immediately and removing it from activeIds.\r\n        // Happens when manually clicking on pad.\r\n        if (isPadActive) {\r\n            loopFile.current.pause()\r\n            loopFile.current.currentTime = 0\r\n            toggleIsPlaying(false)\r\n        }\r\n        manageQueue(pad)\r\n    }\r\n\r\n    return <article className={`pad-preview ${isPadActive ? 'active' : ''}`}>\r\n        <button onClick={onTogglePlay} style={{ backgroundColor: pad.bgc }}>\r\n            {/* <span>{pad.title}</span> */}\r\n        </button>\r\n    </article>\r\n}","import { PadPreview } from './PadPreview.jsx'\r\n\r\nexport const PadList = ({ pads, activeTrackIds, manageQueue,\r\n    isPlaying, toggleIsPlaying, recSettings, handleRec }) => {\r\n\r\n    return <section className=\"pad-list main-layout\">\r\n        {pads.map(pad => {\r\n            return <PadPreview key={pad._id} pad={pad} activeTrackIds={activeTrackIds} manageQueue={manageQueue}\r\n                isPlaying={isPlaying} toggleIsPlaying={toggleIsPlaying} recSettings={recSettings} handleRec={handleRec} />\r\n        })}\r\n    </section>\r\n}","export const padService = {\r\n    query\r\n}\r\n\r\nfunction query() {\r\n    \r\n    const { PUBLIC_URL } = process.env\r\n\r\n    return [\r\n        {\r\n            _id: 'p101',\r\n            title: '120_future_funk_beats_25',\r\n            fileUrl: `${PUBLIC_URL}/sounds/120_future_funk_beats_25.mp3`,\r\n            bgc: '#2da254',\r\n        },\r\n        {\r\n            _id: 'p102',\r\n            title: '120_stutter_breakbeats_16',\r\n            fileUrl: `${PUBLIC_URL}/sounds/120_stutter_breakbeats_16.mp3`,\r\n            bgc: '#ca9d2a',\r\n        },\r\n        {\r\n            _id: 'p103',\r\n            title: 'Bass Warwick heavy funk groove on E 120 BPM',\r\n            fileUrl: `${PUBLIC_URL}/sounds/Bass Warwick heavy funk groove on E 120 BPM.mp3`,\r\n            bgc: '#c32e2e',\r\n        },\r\n        {\r\n            _id: 'p104',\r\n            title: 'electric guitar coutry slide 120bpm - B',\r\n            fileUrl: `${PUBLIC_URL}/sounds/electric guitar coutry slide 120bpm - B.mp3`,\r\n            bgc: '#2d69a2',\r\n        },\r\n        {\r\n            _id: 'p105',\r\n            title: 'FUD_120_StompySlosh',\r\n            fileUrl: `${PUBLIC_URL}/sounds/FUD_120_StompySlosh.mp3`,\r\n            bgc: '#832da2',\r\n        },\r\n        {\r\n            _id: 'p106',\r\n            title: 'GrooveB_120bpm_Tanggu',\r\n            fileUrl: `${PUBLIC_URL}/sounds/GrooveB_120bpm_Tanggu.mp3`,\r\n            bgc: '#a9bb32',\r\n        },\r\n        {\r\n            _id: 'p107',\r\n            title: 'MazePolitics_120_Perc',\r\n            fileUrl: `${PUBLIC_URL}/sounds/MazePolitics_120_Perc.mp3`,\r\n            bgc: '#2d9fa2',\r\n        },\r\n        {\r\n            _id: 'p108',\r\n            title: 'PAS3GROOVE1.03B',\r\n            fileUrl: `${PUBLIC_URL}/sounds/PAS3GROOVE1.03B.mp3`,\r\n            bgc: '#509de6',\r\n        },\r\n        {\r\n            _id: 'p109',\r\n            title: 'SilentStar_120_Em_OrganSynth',\r\n            fileUrl: `${PUBLIC_URL}/sounds/SilentStar_120_Em_OrganSynth.mp3`,\r\n            bgc: '#a22d7b',\r\n        },\r\n    ]\r\n}","export const utilService = {\r\n    delay,\r\n    getRandomInt,\r\n    makeId,\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    removeFromStorage\r\n}\r\n\r\nfunction delay(ms = 1500) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms)\r\n    })\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n    //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    const str = JSON.stringify(val)\r\n    localStorage.setItem(key, str)\r\n}\r\nfunction loadFromStorage(key) {\r\n    const str = localStorage.getItem(key)\r\n    return JSON.parse(str)\r\n}\r\nfunction removeFromStorage(key) {\r\n    localStorage.removeItem(key)\r\n}","export default __webpack_public_path__ + \"static/media/btn-play.126aea10.svg\";","export default __webpack_public_path__ + \"static/media/btn-stop.73f93c54.svg\";","export default __webpack_public_path__ + \"static/media/btn-rec.05805e70.svg\";","export default __webpack_public_path__ + \"static/media/btn-clear.8716bcd0.svg\";","export default __webpack_public_path__ + \"static/media/rec-indication.908f56a5.svg\";","import { Fragment, useState } from 'react'\r\nimport { PadList } from '../cmps/PadList'\r\nimport { padService } from '../services/padService'\r\nimport { utilService } from '../services/utilService'\r\n\r\n// SVGs -\r\nimport playBtnIco from '../assets/imgs/btn-play.svg'\r\nimport stopBtnIco from '../assets/imgs/btn-stop.svg'\r\nimport recBtnIco from '../assets/imgs/btn-rec.svg'\r\nimport clearBtnIco from '../assets/imgs/btn-clear.svg'\r\nimport recIndicationIco from '../assets/imgs/rec-indication.svg'\r\n\r\n\r\n//// To whomever this may concern, I welcome you to my freshly-made \"BEAT IT\" looper ReactJS app.\r\n//// As I've mentioned in the letter I sent together with the app,\r\n//// the finished product, while mostly operational,\r\n//// resulted in being slightly more complex to understand than I initially intended.\r\n//// Hence, I left comments wherever necessary.\r\n//// Feel free to have a look around :)\r\n\r\nexport const Home = () => {\r\n\r\n    let pads = padService.query()\r\n    const STORAGE_KEY = 'REC'\r\n    const recordingFromStorage = utilService.loadFromStorage(STORAGE_KEY)\r\n    const [activeTrackIds, setActiveTrackIds] = useState([])\r\n    const [isPlaying, toggleIsPlaying] = useState(false)\r\n    const [recSettings, setRecSettings] = useState({\r\n        recIsOn: false,\r\n        iteration: 0,\r\n        recording: recordingFromStorage || []\r\n    })\r\n\r\n    const manageQueue = pad => {\r\n        // In charge of dynamically inserting/removing IDs from \"activeTrackIds\"\r\n        if (activeTrackIds.includes(pad._id)) {\r\n            setActiveTrackIds(activeTrackIds.filter(padId => {\r\n                return padId !== pad._id\r\n            }))\r\n        }\r\n        else setActiveTrackIds([...activeTrackIds, pad._id])\r\n    }\r\n\r\n    // From this point on, all 4 remaining function deal only with recording logic\r\n    const onToggleRec = () => {\r\n        setRecSettings({\r\n            ...recSettings,\r\n            recIsOn: !recSettings.recIsOn,\r\n            iteration: 0\r\n        })\r\n    }\r\n\r\n    const handleRec = () => {\r\n        // In charge of advancing the iteration count,\r\n        // as well as adding a new activeIds array into the recorded data\r\n        setRecSettings({\r\n            ...recSettings,\r\n            iteration: recSettings.iteration + 1,\r\n            recording: [...recSettings.recording, activeTrackIds]\r\n        })\r\n    }\r\n\r\n    const onRecPlayback = () => {\r\n        // In charge of dynamic playback/stop (specifically for the recording)\r\n        if (isPlaying) {\r\n            utilService.saveToStorage(STORAGE_KEY, recSettings.recording)\r\n            return window.location.reload() // temp solution\r\n        }\r\n        setActiveTrackIds(recSettings.recording[recSettings.iteration])\r\n        setRecSettings({ ...recSettings, iteration: recSettings.iteration + 1 })\r\n        setTimeout(() => toggleIsPlaying(true), 5)\r\n    }\r\n\r\n    const onClearRec = () => {\r\n        // Clearing from localStorage and re-initializing \"recSettings\"\r\n        utilService.removeFromStorage(STORAGE_KEY)\r\n        setRecSettings({\r\n            ...recSettings,\r\n            recIsOn: false,\r\n            iteration: 0,\r\n            recording: []\r\n        })\r\n    }\r\n\r\n    console.log(activeTrackIds)\r\n    console.log(recSettings)\r\n\r\n    return <section className=\"home-page\">\r\n        <PadList pads={pads} activeTrackIds={activeTrackIds} manageQueue={manageQueue} isPlaying={isPlaying}\r\n            toggleIsPlaying={toggleIsPlaying} recSettings={recSettings} handleRec={handleRec} />\r\n        {recSettings.recIsOn && <img src={recIndicationIco} alt=\"rec-indication\" />}\r\n        <div className=\"global-play-container flex\">\r\n            <button onClick={onRecPlayback}>\r\n                {isPlaying ? <img src={stopBtnIco} alt=\"stop\" />\r\n                    : <img src={playBtnIco} alt=\"play\" />}\r\n            </button>\r\n            <button onClick={onToggleRec}>\r\n                <img src={recBtnIco} alt=\"rec\" />\r\n            </button>\r\n            <div className={`play-time-status flex a-center ${isPlaying ? 'active' : ''}`}>\r\n                <span></span>\r\n                {recSettings.recording.length && !recSettings.recIsOn ?\r\n                    <Fragment>\r\n                        <label className=\"muted\">* Recording available</label>\r\n                        <button onClick={onClearRec}>\r\n                            <img src={clearBtnIco} alt=\"clear\" />\r\n                        </button>\r\n                    </Fragment> : null}\r\n            </div>\r\n        </div>\r\n    </section>\r\n}","import { NavLink } from 'react-router-dom'\r\n\r\nexport const AppHeader = () => {\r\n\r\n    return <header className=\"app-header\">\r\n        <section className=\"main-layout flex j-between a-center\">\r\n            <div className=\"logo flex a-center\">\r\n                <img src={`${process.env.PUBLIC_URL}/favicon.png`} alt=\"\" />\r\n                <NavLink to=\"/\">BEAT IT</NavLink>\r\n            </div>\r\n            <nav>\r\n                <a href=\"https://github.com/tomleb3/beatit\">\r\n                    <svg stroke=\"currentColor\" fill=\"none\" strokeWidth=\"2\" viewBox=\"0 0 24 24\" strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\" className=\"social-link\" height=\"2em\" width=\"2em\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35\r\n                         6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65\r\n                          16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44\r\n                           5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22\"></path>\r\n                    </svg>\r\n                </a>\r\n            </nav>\r\n        </section>\r\n    </header>\r\n}","import { Switch, Route } from 'react-router-dom'\nimport { Home } from './pages/Home.jsx'\nimport { AppHeader } from './cmps/AppHeader.jsx'\n\nexport function App() {\n  return (\n    <main className=\"App\">\n      <AppHeader />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n      </Switch>\n    </main>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport { HashRouter as Router } from 'react-router-dom'\nimport './styles/global.scss'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.unregister()\nreportWebVitals()\n"],"sourceRoot":""}